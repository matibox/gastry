generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String      @id @default(uuid())
  email          String      @unique
  name           String      @unique
  password       String
  role           Role        @default(user)
  profilePicture String      @default("https://res.cloudinary.com/drjsjdeff/image/upload/v1670939224/gastry/defaultAvatar_lekctc.png")
  recipes        Recipe[]
  favourites     Favourite[]
  menus          Menu[]
}

enum Role {
  user
  admin
}

model Recipe {
  id           String       @id @default(uuid())
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  title        String
  cookingTime  Int
  instructions String       @db.Text
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  thumbnail    String?
  ingredients  Ingredient[]
  favourites   Favourite[]
  timeOfDays   TimeOfDay[]
  types        RecipeType[]

  @@index([userId])
}

enum RecipeTypeName {
  vegetarian
  vegan
  spicy
}

model RecipeType {
  id      String         @id @default(uuid())
  name    RecipeTypeName
  recipes Recipe[]
}

model Ingredient {
  id      String   @id @default(uuid())
  name    String
  value   Int
  unit    String?
  recipes Recipe[]
}

model Favourite {
  id       String @id @default(uuid())
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  userId   String
  recipeId String

  @@unique([userId, recipeId])
  @@index([userId])
  @@index([recipeId])
}

model Menu {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  name      String
  days      Day[]
  updatedAt DateTime @updatedAt

  @@index([userId])
}

enum WeekDays {
  monday
  tuesday
  wednesday
  thrusday
  friday
  saturday
  sunday
}

model Day {
  id         String      @id @default(uuid())
  menu       Menu        @relation(fields: [menuId], references: [id], onDelete: Cascade)
  menuId     String
  name       WeekDays
  timeOfDays TimeOfDay[]
  order      Int         @db.UnsignedTinyInt

  @@index([menuId])
}

enum TimeOfDays {
  morning
  before_noon
  noon
  afternoon
  evening
}

model TimeOfDay {
  id       String     @id @default(uuid())
  day      Day        @relation(fields: [dayId], references: [id], onDelete: Cascade)
  dayId    String
  recipe   Recipe?    @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId String?
  name     TimeOfDays
  order    Int        @db.UnsignedTinyInt

  @@index([dayId])
  @@index([recipeId])
}

model RefreshToken {
  id    String @id @default(uuid())
  token String @db.VarChar(250)
}
